%class AutomataAnalyzer

%start MainMap::Start

%map MainMap

%%
Default {
		Start					Start				{ ClearSMC(); }
		LetterL (ch: String)	Error				{ Unacceptable(); }
		LetterU	(ch: String)	Error				{ Unacceptable(); }
		SpaceSmb				Error				{ Unacceptable(); }
		GridSmb					Error				{ Unacceptable(); }
		TabSmb					Error				{ Unacceptable(); }
		Unknown					Error				{ Unacceptable(); }
		EOS 					Error				{ Unacceptable(); }
}

Start{
		SpaseSmb				Start				{}
		GridSmb					Grid 				{ IncCnt(); }
}

Grid{
		LetterL (ch:String)		Command				{ InsToBuf(ch);IncCnt(); }
}

Command{
		LetterL (ch:String)     	nil					{ InsToBuf(ch);IncCnt(); }
		SpaceSmb [ctxt.CheckCmd()]	Space1				{ InsCmd(); ClearBuf();IncCnt(); }
}	

Space1{
		LetterU (ch:String)			Macros				{ InsToBuf(ch); IncCnt();IncLength() ;}
}

Macros{
		LetterU (ch:String) [ctxt.LessThen10()] 	nil 				{ InsToBuf(ch); IncCnt(); IncLength(); }
		SpaceSmb 									Space2				{ InsMacros(); IncCnt(); ClearBuf(); }
		EOS [ctxt.CheckOP1()]														OK					{ InsMacros(); ClearBuf();}
}

Space2{
		LetterL (ch:String) [(ctxt.LessThen80()) and (ctxt.CheckOP2())]			Operands			{ InsToBuf(ch);	IncCnt(); }
		LetterU (ch:String) [(ctxt.LessThen80()) and (ctxt.CheckOP2())]    		Operands			{ InsToBuf(ch); IncCnt(); }
		EOS [ctxt.CheckOP1()]														OK					{ ClearBuf();}
}

Operands{
		LetterL (ch:String)[ctxt.LessThen80()] 		nil					{ InsToBuf(ch); IncCnt(); }
		LetterU	(ch:String)[ctxt.LessThen80()]		nil					{ InsToBuf(ch); IncCnt(); }
		SpaceSmb [ctxt.LessThen80()]				Space3				{ InsOps(); IncNoe(); IncCnt(); ClearBuf(); }
		EOS											OK					{ InsOps(); ClearBuf(); }
} 

Space3{
		LetterL (ch:String)[ctxt.LessThen80()] 		Operands			{ InsToBuf(ch); IncCnt(); }
		LetterU	(ch:String)[ctxt.LessThen80()]		Operands			{ InsToBuf(ch); IncCnt(); }
		
}

OK{
		EOS					nil				{ Acceptable(); }
}

Error{
		EOS					nil				{ Unacceptable(); }
}
%%